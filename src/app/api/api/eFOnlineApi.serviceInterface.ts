/**
 * Next-Gen App API
 * Die REST Web-Schnittstelle zu der Next-Gen App Anwendung
 *
 * The version of the OpenAPI document: v1
 * Contact: info@brunnerinformatik.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { EfoCreateEProjectRequest } from '../model/models';
import { EfoDeviceDTO } from '../model/models';
import { EfoEProjectDTO } from '../model/models';
import { EfoEProjectInfoDTO } from '../model/models';
import { EfoIdentityContextDTO } from '../model/models';
import { EfoLanguageCode } from '../model/models';
import { ProblemDetails } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface EFOnlineApiServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Retrieves all the identity contexts that are available to the currently authenticated user.
     * 
     */
    apiV1EfoIdentityGet(extraHttpRequestParams?: any): Observable<Array<EfoIdentityContextDTO>>;

    /**
     * Retireves the device with the specified type and the given component ID from the Eturnity AG component database.  It then adds the specified count of device(s) to the specified building within the tenant identified by the  identity context.
     * 
     * @param buildingGuid The GUID of the building to which the device(s) should be added.
     * @param componentType The type of the component to add.                The following values are possible: &#x60;pv_panel&#x60;, &#x60;inverter&#x60; or &#x60;storage&#x60;.
     * @param componentID The ID of the device within the component database.
     * @param count The count of device(s) to add to the specified building.
     */
    apiV1EfoProjectsDevicesByIdPost(buildingGuid: string, componentType: string, componentID: string, count?: number, extraHttpRequestParams?: any): Observable<EfoDeviceDTO>;

    /**
     * Deletes the device with the specified GUID from within the tenant specified by the identity context.
     * 
     * @param guid The GUID of the device to delete.
     */
    apiV1EfoProjectsDevicesGuidDelete(guid: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Retrieves the device with the specified GUID from within the tenant specified by the identity context.
     * 
     * @param guid The GUID of the device to retrieve.
     */
    apiV1EfoProjectsDevicesGuidGet(guid: string, extraHttpRequestParams?: any): Observable<EfoDeviceDTO>;

    /**
     * Creates a new device or updates an existing device based on it\&#39;s GUID within the tenant specified by the  identity context.                A new device is created when the &#x60;guid&#x60; Field of the data transfer object is set to the &#x60;null&#x60; vlaue, otherwise  the device with the specified GUID will be updated.
     * 
     * @param efoDeviceDTO The device to create or update.
     */
    apiV1EfoProjectsDevicesPost(efoDeviceDTO?: EfoDeviceDTO, extraHttpRequestParams?: any): Observable<EfoDeviceDTO>;

    /**
     * Retrieves an optionally filtered collection of electrical projects to which the current employee has access.
     * 
     * @param language The code of the language, in which the electrical project\&#39;s phase names should be returned.
     * @param limit &lt;br&gt;               The maximum count of electrical projects to retrieve.                &lt;br&gt;               Must be an integer between 1 and 1024              
     * @param skip &lt;br&gt;               The count of electrical projects to skip initially. This feature can be used for pagination.                &lt;br&gt;               Must be an integer between 0 and 2147483646.              
     */
    apiV1EfoProjectsGet(language?: EfoLanguageCode, limit?: number, skip?: number, extraHttpRequestParams?: any): Observable<Array<EfoEProjectInfoDTO>>;

    /**
     * Deletes all the device from the ElektroForm electric project with the specified GUID within the tenant specified  by the identity context.
     * 
     * @param guid The GUID of the project, which devices are deleted.
     */
    apiV1EfoProjectsGuidDevicesDelete(guid: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Retrieves the ElektroForm electric project with the specified GUID from within the tenant specified by the  identity context.
     * 
     * @param guid The GUID of the project to retrieve.
     */
    apiV1EfoProjectsGuidGet(guid: string, extraHttpRequestParams?: any): Observable<EfoEProjectDTO>;

    /**
     * Creates a new ElektroForm electric project.
     * 
     * @param efoCreateEProjectRequest The DTO object containing the data of the electric project to create.
     */
    apiV1EfoProjectsPost(efoCreateEProjectRequest?: EfoCreateEProjectRequest, extraHttpRequestParams?: any): Observable<EfoEProjectDTO>;

}
