/**
 * Next-Gen App API
 * Die REST Web-Schnittstelle zu der Next-Gen App Anwendung
 *
 * The version of the OpenAPI document: v1
 * Contact: info@brunnerinformatik.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { IdentityContextDTO } from '../model/models';
import { MitarbeiterDTO } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface MitarbeiterServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * 
     * 
     * @param mandant 
     * @param employee 
     * @param token 
     */
    apiV1MitarbeiterApiV1MitarbeiterConnectPost(mandant?: string, employee?: string, token?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Gibt den IdentityContext des Users zurück.
     * 
     */
    apiV1MitarbeiterApiV1MitarbeiterIdentityGet(extraHttpRequestParams?: any): Observable<Array<IdentityContextDTO>>;

    /**
     * 
     * 
     * @param mandant 
     * @param employee 
     * @param returnUri 
     */
    apiV1MitarbeiterApiV1MitarbeiterInvitePost(mandant?: string, employee?: string, returnUri?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Sucht nach Mitarbeitern in den verschiedenen Feldern (Name, Vorname, Telefon, Email usw.) mittels Suchbegriff.
     * 
     * @param text Suchbegriff, nach welchem gesucht werden soll. Der Text soll nicht leer sein.
     * @param mandant Mandant der Mitarbeiter. Falls der Mandant leer wird über alle Mitarbeiter gesucht.
     * @param limit Anzahl an Mitarbeitern die zurückgeliefert werden sollen. Wert zwischen 1 und 100. Default ist 10.
     * @param skip Anzahl von ausgelassenen Ergebnissen für Paging. z.B. 0 für erste Seite, 10 für zweite Seite.
     */
    apiV1MitarbeiterApiV1MitarbeiterSuchenGet(text?: string, mandant?: string, limit?: number, skip?: number, extraHttpRequestParams?: any): Observable<Array<MitarbeiterDTO>>;

    /**
     * 
     * 
     * @param mandant 
     * @param employee 
     * @param token 
     */
    apiV1MitarbeiterApiV1MitarbeiterValidateGet(mandant?: string, employee?: string, token?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Gibt alle Mitarbeiter mit dem angegebenen Limit zurück, absteigend sortiert nach Erstellt-Datum.
     * 
     * @param limit 
     * @param skip 
     */
    apiV1MitarbeiterGet(limit?: number, skip?: number, extraHttpRequestParams?: any): Observable<Array<MitarbeiterDTO>>;

    /**
     * Gibt eine Liste Mitarbeiter pro Holding GuId zurück.
     * 
     * @param guidHolding Holding GuId welcher Mitarbeiter angehört.
     * @param limit Anzahl an Mitarbeitern die zurückgeliefert werden sollen. Wert zwischen 1 und 100. Default ist 10.
     * @param skip Anzahl von ausgelassenen Ergebnissen für Paging. z.B. 0 für erste Seite, 10 für zweite Seite.
     */
    apiV1MitarbeiterHoldingGet(guidHolding?: string, limit?: number, skip?: number, extraHttpRequestParams?: any): Observable<Array<MitarbeiterDTO>>;

    /**
     * Löscht einen Mitarbeiter
     * Der Mitarbeiter wird nur dann gelöscht, wenn sie keine weiteren Abhängigkeiten hat.
     * @param id Primärer Schlüssel des Mitarbeiter
     */
    apiV1MitarbeiterIdDelete(id: number, extraHttpRequestParams?: any): Observable<MitarbeiterDTO>;

    /**
     * Fügt einen neuen Mitarbeiter hinzu
     * **Beim Einfügen werdie die Felder id und validiert ignoriert.**                Das ist die zweite Zeile
     * @param mitarbeiterDTO Neuer Mitarbeiter
     */
    apiV1MitarbeiterPost(mitarbeiterDTO?: MitarbeiterDTO, extraHttpRequestParams?: any): Observable<MitarbeiterDTO>;

    /**
     * Update eines Mitarbeiter
     * &gt;Das Feld validiert wird nicht überschrieben und wird ignoriert.
     * @param mitarbeiterDTO 
     */
    apiV1MitarbeiterPut(mitarbeiterDTO?: MitarbeiterDTO, extraHttpRequestParams?: any): Observable<MitarbeiterDTO>;

    /**
     * Gibt einen Mitarbeiter pro Mandant / Mitarbeiter-Guid zurück.
     * 
     * @param mandant Mandant Guid.
     * @param guid Guid eines Mitarbeiters.
     */
    apiV1MitarbeiterQueryGet(mandant?: string, guid?: string, extraHttpRequestParams?: any): Observable<MitarbeiterDTO>;

}
